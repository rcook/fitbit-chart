#!/usr/bin/env ruby
require 'fileutils'
require 'net/http'
require 'ostruct'
require 'uri'
require 'yaml'

require_relative 'lib/shell'

class Item
  attr_reader :target_path

  def initialize(target_path)
    @target_path = target_path
  end
end

class LocalItem < Item
  def initialize(target_path, source_path)
    super target_path
    @source_path = source_path
  end

  def to_s
    "[#{@target_path} (#{@source_path})"
  end

  def make
    @source_path
  end
end

class HttpItem < Item
  def initialize(target_path, uri, cache_dir)
    super target_path
    @uri = uri
    @download_dir = File.expand_path('download', cache_dir)
  end

  def to_s
    "[#{@target_path} (#{@uri})"
  end

  def make
    download_path = File.expand_path(@target_path, @download_dir)
    unless File.exist?(download_path)
      download_dir = File.dirname(download_path)
      FileUtils.mkdir_p download_dir unless Dir.exist?(download_dir)
      str = Net::HTTP.get(@uri)
      File.write download_path, str
    end
    download_path
  end
end

def load_items(cache_dir, path)
  manifest_path = File.expand_path(path)
  manifest_dir = File.dirname(manifest_path)
  o = YAML.load(File.read(manifest_path))
  (o['items'] || []).map do |item|
    if item.is_a?(String)
      LocalItem.new(item, File.expand_path(item, manifest_dir))
    elsif item.is_a?(Hash)
      if item.include?('uri')
        HttpItem.new(item.fetch('path'), URI(item.fetch('uri')), cache_dir)
      else
        LocalItem.new(item.fetch('path'), File.expand_path(item.fetch('source_path')))
      end
    else
      raise 'Not implemented'
    end
  end
end

def main
  this_dir = File.expand_path('..', __FILE__).freeze
  cache_dir = File.expand_path('.fitbit-demo-build-cache', ENV['HOME'])
  items = load_items(cache_dir, File.join(this_dir, 'assets.yaml'))
  items.each do |item|
    source_path = item.make
    status = Shell.run([
      'aws',
      's3',
      'cp',
      source_path,
      File.join('s3://fitbit-demo/', item.target_path)
    ])
    puts "FAILED: #{source_path}" unless status.success?
  end
end

main
